{"version":3,"file":"background.js","mappings":"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","sources":["webpack://game-doc-system/./src/shared/types.ts","webpack://game-doc-system/./src/shared/storage.ts","webpack://game-doc-system/./src/background/background.ts"],"sourcesContent":["// Document types supported by the system\r\nexport enum DocumentType {\r\n  GameVision = 'game_vision',\r\n  CoreGameConcept = 'core_game_concept',\r\n  TargetAudience = 'target_audience',\r\n  CorePillarsValues = 'core_pillars_values',\r\n  WhyPlayIt = 'why_play_it',\r\n  WhatShouldTheyFeel = 'what_should_they_feel',\r\n  UniqueSellingPoints = 'unique_selling_points',\r\n  GameLoop = 'game_loop',\r\n  PlayerJourney = 'player_journey',\r\n  StoryOverview = 'story_overview',\r\n  Presentation = 'presentation',\r\n  KeyQuestions = 'key_questions',\r\n  CoreDesignDetails = 'core_design_details',\r\n  StrategicDirection = 'strategic_direction'\r\n}\r\n\r\n// Document status\r\nexport enum DocumentStatus {\r\n  NotStarted = 'not_started',\r\n  InProgress = 'in_progress',\r\n  Completed = 'completed'\r\n}\r\n\r\n// Project structure\r\nexport interface GameProject {\r\n  id: string;\r\n  name: string;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  documents: Record<string, GameDocument>;\r\n}\r\n\r\n// Document structure\r\nexport interface GameDocument {\r\n  id: string;\r\n  projectId: string;\r\n  type: DocumentType;\r\n  title: string;\r\n  content: string;\r\n  status: DocumentStatus;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  versions: DocumentVersion[];\r\n}\r\n\r\n// Document version\r\nexport interface DocumentVersion {\r\n  versionNumber: number;\r\n  content: string;\r\n  createdAt: number;\r\n  notes: string;\r\n}\r\n\r\n// Message types for communication between components\r\nexport enum MessageType {\r\n  GetProjects = 'get_projects',\r\n  CreateProject = 'create_project',\r\n  UpdateProject = 'update_project',\r\n  DeleteProject = 'delete_project',\r\n  GetProject = 'get_project',\r\n  CreateDocument = 'create_document',\r\n  UpdateDocument = 'update_document',\r\n  GetDocument = 'get_document',\r\n  DeleteDocument = 'delete_document',\r\n  StartDocumentCreation = 'start_document_creation'\r\n}\r\n\r\n// Message structure\r\nexport interface Message {\r\n  type: MessageType;\r\n  payload: any;\r\n}\r\n\r\n// Response structure\r\nexport interface Response {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n}\r\n","import { GameProject, GameDocument, DocumentType, DocumentStatus, DocumentVersion } from './types';\r\n\r\nexport class StorageManager {\r\n  // Initialize storage\r\n  public async initialize(): Promise<void> {\r\n    const existingData = await this.getProjects();\r\n    \r\n    if (!existingData) {\r\n      await chrome.storage.local.set({ projects: {} });\r\n      console.log('Storage initialized with empty projects');\r\n    }\r\n  }\r\n  \r\n  // Get all projects\r\n  public async getProjects(): Promise<Record<string, GameProject> | null> {\r\n    const data = await chrome.storage.local.get('projects');\r\n    return data.projects || null;\r\n  }\r\n  \r\n  // Get specific project\r\n  public async getProject(projectId: string): Promise<GameProject | null> {\r\n    const projects = await this.getProjects();\r\n    return projects && projects[projectId] ? projects[projectId] : null;\r\n  }\r\n  \r\n  // Create new project\r\n  public async createProject(name: string): Promise<GameProject> {\r\n    const projects = await this.getProjects() || {};\r\n    \r\n    const projectId = 'project_' + Date.now();\r\n    const timestamp = Date.now();\r\n    \r\n    const newProject: GameProject = {\r\n      id: projectId,\r\n      name,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp,\r\n      documents: this.createInitialDocuments(projectId)\r\n    };\r\n    \r\n    projects[projectId] = newProject;\r\n    await chrome.storage.local.set({ projects });\r\n    \r\n    return newProject;\r\n  }\r\n  \r\n  // Create the initial document set for a new project\r\n  private createInitialDocuments(projectId: string): Record<string, GameDocument> {\r\n    const documents: Record<string, GameDocument> = {};\r\n    const timestamp = Date.now();\r\n    \r\n    // Create a document entry for each document type\r\n    Object.values(DocumentType).forEach((type) => {\r\n      const documentId = `${projectId}_${type}`;\r\n      \r\n      documents[documentId] = {\r\n        id: documentId,\r\n        projectId,\r\n        type: type as DocumentType,\r\n        title: this.getDefaultTitle(type as DocumentType),\r\n        content: '',\r\n        status: DocumentStatus.NotStarted,\r\n        createdAt: timestamp,\r\n        updatedAt: timestamp,\r\n        versions: []\r\n      };\r\n    });\r\n    \r\n    return documents;\r\n  }\r\n  \r\n  // Get default title for each document type\r\n  private getDefaultTitle(type: DocumentType): string {\r\n    const titles: Record<DocumentType, string> = {\r\n      [DocumentType.GameVision]: 'Game Vision',\r\n      [DocumentType.CoreGameConcept]: 'Core Game Concept',\r\n      [DocumentType.TargetAudience]: 'Target Audience',\r\n      [DocumentType.CorePillarsValues]: 'Core Pillars and Values',\r\n      [DocumentType.WhyPlayIt]: 'Why Would They Play It?',\r\n      [DocumentType.WhatShouldTheyFeel]: 'What Should They Feel?',\r\n      [DocumentType.UniqueSellingPoints]: 'Unique Selling Points',\r\n      [DocumentType.GameLoop]: 'Game Loop',\r\n      [DocumentType.PlayerJourney]: 'Player Journey',\r\n      [DocumentType.StoryOverview]: 'Story Overview',\r\n      [DocumentType.Presentation]: 'Presentation',\r\n      [DocumentType.KeyQuestions]: 'Key Questions',\r\n      [DocumentType.CoreDesignDetails]: 'Core Design Details',\r\n      [DocumentType.StrategicDirection]: 'Strategic Direction'\r\n    };\r\n    \r\n    return titles[type] || 'Untitled Document';\r\n  }\r\n  \r\n  // Update document\r\n  public async updateDocument(document: GameDocument): Promise<GameDocument> {\r\n    const projects = await this.getProjects();\r\n    if (!projects) throw new Error('No projects found');\r\n    \r\n    const project = projects[document.projectId];\r\n    if (!project) throw new Error('Project not found');\r\n    \r\n    // Create new version if content changed\r\n    const existingDoc = project.documents[document.id];\r\n    if (existingDoc && existingDoc.content !== document.content && existingDoc.content !== '') {\r\n      const newVersion: DocumentVersion = {\r\n        versionNumber: existingDoc.versions.length + 1,\r\n        content: existingDoc.content,\r\n        createdAt: Date.now(),\r\n        notes: 'Automatic version created'\r\n      };\r\n      \r\n      document.versions = [...existingDoc.versions, newVersion];\r\n    }\r\n    \r\n    document.updatedAt = Date.now();\r\n    project.documents[document.id] = document;\r\n    project.updatedAt = Date.now();\r\n    \r\n    await chrome.storage.local.set({ projects });\r\n    \r\n    return document;\r\n  }\r\n  \r\n  // Delete project\r\n  public async deleteProject(projectId: string): Promise<void> {\r\n    const projects = await this.getProjects();\r\n    if (!projects) return;\r\n    \r\n    delete projects[projectId];\r\n    await chrome.storage.local.set({ projects });\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nexport const storageManager = new StorageManager();\r\n","import { StorageManager, storageManager } from '../shared/storage';\r\nimport { MessageType, Response } from '../shared/types';\r\n\r\n// Initialize when extension is installed or updated\r\nchrome.runtime.onInstalled.addListener(async () => {\r\n  console.log('Game Development Document System installed/updated');\r\n  await storageManager.initialize();\r\n});\r\n\r\n// Listen for messages from content scripts or popup\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  handleMessage(message)\r\n    .then(sendResponse)\r\n    .catch(error => {\r\n      console.error('Error handling message:', error);\r\n      sendResponse({ success: false, error: error.message });\r\n    });\r\n  \r\n  // Return true to indicate we'll respond asynchronously\r\n  return true;\r\n});\r\n\r\n// Handle messages based on their type\r\nasync function handleMessage(message: any): Promise<Response> {\r\n  console.log('Background received message:', message);\r\n  \r\n  const { type, payload } = message;\r\n  \r\n  try {\r\n    switch (type) {\r\n      case MessageType.GetProjects:\r\n        const projects = await storageManager.getProjects();\r\n        return { success: true, data: projects };\r\n        \r\n      case MessageType.CreateProject:\r\n        const project = await storageManager.createProject(payload.name);\r\n        return { success: true, data: project };\r\n        \r\n      case MessageType.GetProject:\r\n        const foundProject = await storageManager.getProject(payload.projectId);\r\n        return { success: true, data: foundProject };\r\n        \r\n      case MessageType.UpdateDocument:\r\n        const updatedDoc = await storageManager.updateDocument(payload.document);\r\n        return { success: true, data: updatedDoc };\r\n        \r\n      case MessageType.DeleteProject:\r\n        await storageManager.deleteProject(payload.projectId);\r\n        return { success: true };\r\n        \r\n      default:\r\n        return { success: false, error: `Unknown message type: ${type}` };\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    };\r\n  }\r\n}\r\n"],"names":["DocumentType","DocumentStatus","MessageType","storageManager","initialize","this","getProjects","chrome","storage","local","set","projects","console","log","get","getProject","projectId","createProject","name","Date","now","timestamp","newProject","id","createdAt","updatedAt","documents","createInitialDocuments","Object","values","forEach","type","documentId","title","getDefaultTitle","content","status","NotStarted","versions","GameVision","CoreGameConcept","TargetAudience","CorePillarsValues","WhyPlayIt","WhatShouldTheyFeel","UniqueSellingPoints","GameLoop","PlayerJourney","StoryOverview","Presentation","KeyQuestions","CoreDesignDetails","StrategicDirection","updateDocument","document","Error","project","existingDoc","newVersion","versionNumber","length","notes","deleteProject","runtime","onInstalled","addListener","async","onMessage","message","sender","sendResponse","payload","GetProjects","success","data","CreateProject","GetProject","UpdateDocument","DeleteProject","error","handleMessage","then","catch"],"sourceRoot":""}