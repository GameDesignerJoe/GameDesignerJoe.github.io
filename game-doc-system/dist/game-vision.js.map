{"version":3,"file":"game-vision.js","mappings":"mBACA,IAAYA,EAkBAC,EAqCAC,GAvDZ,SAAYF,GACV,2BACA,sCACA,mCACA,0CACA,0BACA,6CACA,8CACA,uBACA,iCACA,iCACA,8BACA,+BACA,0CACA,0CACD,CAfD,CAAYA,IAAAA,EAAY,KAkBxB,SAAYC,GACV,2BACA,2BACA,uBACD,CAJD,CAAYA,IAAAA,EAAc,KAqC1B,SAAYC,GACV,6BACA,iCACA,iCACA,iCACA,2BACA,mCACA,mCACA,6BACA,mCACA,iDACD,CAXD,CAAYA,IAAAA,EAAW,KCrDhB,MAAMC,EAA8C,CACvDC,GAAI,sBACJC,KAAML,EAAaM,WACnBC,KAAM,cACNC,YAAa,mEACbC,QAAS,QACTC,UAAU,EACVC,aAAcC,KAAKC,MACnBC,SAAU,CACNC,QAAS,iGACTC,eAAgB,CACZ,8BACA,kCACA,8BACA,2BAEJC,aAAc,CACVC,SAAU,CACN,oBACA,wCACA,4DAEJC,aAAc,CACV,wCACA,mCACA,2BACA,gCACA,yCC1BT,MAAMC,EAOT,wBAAaC,CAAYhB,GACrB,IAEI,aADwBiB,KAAKC,mBACZlB,IAASiB,KAAKE,kBAAkBnB,E,CACnD,MAAOoB,GAEL,OADAC,QAAQD,MAAM,0BAA2BA,GAClCH,KAAKE,kBAAkBnB,E,CAEtC,CAEA,4BAAakB,GACT,IAEI,aADqBI,OAAOC,QAAQC,KAAKC,IAAIR,KAAKS,cACpCT,KAAKS,cAAgBT,KAAKE,iB,CAC1C,MAAOC,GAEL,OADAC,QAAQD,MAAM,2BAA4BA,GACnCH,KAAKE,iB,CAEpB,CAEA,yBAAaQ,CAAa3B,EAAoBS,GAC1C,IACI,MAAMmB,QAAkBX,KAAKC,kBACvBW,EAAWD,EAAU5B,IAASiB,KAAKE,kBAAkBnB,GAE3D,IAAK6B,EACD,MAAM,IAAIC,MAAM,+BAA+B9B,KAGnD,MAAM+B,EAAoC,IACnCF,EACHpB,WACAH,aAAcC,KAAKC,MACnBH,UAAU,SAGRiB,OAAOC,QAAQC,KAAKQ,IAAI,CAC1B,CAACf,KAAKS,aAAc,IACbE,EACH,CAAC5B,GAAO+B,I,CAGlB,MAAOX,GAEL,MADAC,QAAQD,MAAM,yBAA0BA,GAClCA,C,CAEd,CAEA,0BAAaa,CAAcjC,GACvB,IACI,MAAM4B,QAAkBX,KAAKC,kBACvBgB,EAAkBjB,KAAKE,kBAAkBnB,GAE/C,IAAKkC,EACD,MAAM,IAAIJ,MAAM,uCAAuC9B,WAGrDsB,OAAOC,QAAQC,KAAKQ,IAAI,CAC1B,CAACf,KAAKS,aAAc,IACbE,EACH,CAAC5B,GAAOkC,I,CAGlB,MAAOd,GAEL,MADAC,QAAQD,MAAM,4BAA6BA,GACrCA,C,CAEd,CAEA,2BAAae,CAAenC,GACxB,IACI,MAAM6B,QAAiBZ,KAAKD,YAAYhB,GACxC,OAAOoC,KAAKC,UAAUR,EAAU,KAAM,E,CACxC,MAAOT,GAEL,MADAC,QAAQD,MAAM,4BAA6BA,GACrCA,C,CAEd,CAEA,2BAAakB,CAAeC,GACxB,IACI,MAAMV,EAA6BO,KAAKI,MAAMD,GAE9C,IAAKV,EAAS7B,OAAS6B,EAASpB,SAC5B,MAAM,IAAIqB,MAAM,iCAGdb,KAAKU,aAAaE,EAAS7B,KAAM6B,EAASpB,S,CAClD,MAAOW,GAEL,MADAC,QAAQD,MAAM,4BAA6BA,GACrCA,C,CAEd,EAlGwB,EAAAM,YAAc,iBACd,EAAAP,kBAAqE,CACzF,CAACxB,EAAaM,YAAaH,GCJnC2C,SAASC,iBAAiB,oBAAoBC,UAC1C,MAAMC,EAAeH,SAASI,cAAmC,kBAC3DC,EAAcL,SAASI,cAA8B,iBACrDE,EAAiBN,SAASI,cAAiC,qBAC3DG,EAAcP,SAASI,cAAiC,+CACxDI,EAAcR,SAASI,cAAiC,+CACxDK,EAAgBT,SAASU,eAAe,oBACxCC,EAAgBX,SAASU,eAAe,cACxCE,EAAiBZ,SAASU,eAAe,eACzCG,EAAmBb,SAASU,eAAe,iBAEjD,IAAKP,IAAiBE,IAAgBI,EAElC,YADA7B,QAAQD,MAAM,+BAIlB,IAAImC,EAAkB,KAGtBZ,eAAea,IACX,IACID,QAAwBxC,EAAgBC,YAAYrB,EAAaM,YAEjE,MAAMwD,EAAiBhB,SAASI,cAA8B,sDAC1DY,IACAA,EAAeC,YAAcH,EAAgB9C,SAASC,SAG1D,MAAMiD,EAAclB,SAASI,cAAgC,gDACzDc,IACAA,EAAYC,UAAYL,EAAgB9C,SAASE,eAC5CkD,KAAIC,GAAQ,OAAOA,WACnBC,KAAK,KAGd,MAAMC,EAAavB,SAASI,cAAgC,8CACxDmB,IACAA,EAAWJ,UAAY,yBACjBL,EAAgB9C,SAASG,aAAaC,SACnCgD,KAAIC,GAAQ,OAAOA,WACnBC,KAAK,2JAGAR,EAAgB9C,SAASG,aAAaE,aACnC+C,KAAIC,GAAQ,OAAOA,WACnBC,KAAK,kF,CAK5B,MAAO3C,GACLC,QAAQD,MAAM,mCAAoCA,E,CAE1D,CA6HA,SAAS6C,EAAWC,EAAclE,GAC9B,IAAK8C,EAAa,OAElB,MAAMqB,EAAa1B,SAAS2B,cAAc,OAC1CD,EAAWE,UAAY,gBAAgBrE,YACvCmE,EAAWT,YAAcQ,EACzBpB,EAAYwB,YAAYH,GACxBA,EAAWI,eAAe,CAAEC,SAAU,UAC1C,CAlIAvB,GAAaP,iBAAiB,SAAS,KACnCc,IACAN,EAAcuB,MAAMC,QAAU,MAAM,IAIxCtB,GAAeV,iBAAiB,SAAS,KACrCQ,EAAcuB,MAAMC,QAAU,MAAM,IAIxCpB,GAAkBZ,iBAAiB,SAAS,KACxCQ,EAAcuB,MAAMC,QAAU,MAAM,IAIxCrB,GAAgBX,iBAAiB,SAASC,UACtC,IACI,MAAMc,EAAiBhB,SAASI,cAA8B,sDACxD8B,EAAsBlC,SAASmC,iBAAgC,qDAC/DC,EAAqBpC,SAASmC,iBAAgC,oEAC9DE,EAAyBrC,SAASmC,iBAAgC,uDAExE,IAAKnB,EACD,MAAM,IAAI3B,MAAM,6BAGpB,MAAMpB,EAAU+C,EAAeC,aAAe,GACxC/C,EAAiBoE,MAAMC,KAAKL,GAAqBd,KAAIoB,GAAMA,EAAGvB,aAAe,KAC7EwB,EAAiBH,MAAMC,KAAKH,GAAoBhB,KAAIoB,GAAMA,EAAGvB,aAAe,KAC5EyB,EAAqBJ,MAAMC,KAAKF,GAAwBjB,KAAIoB,GAAMA,EAAGvB,aAAe,WAEpF3C,EAAgBY,aAAahC,EAAaM,WAAY,CACxDS,UACAC,iBACAC,aAAc,CACVC,SAAUqE,EACVpE,aAAcqE,KAItBjC,EAAcuB,MAAMC,QAAU,M,CAChC,MAAOtD,GACLC,QAAQD,MAAM,kCAAmCA,E,KAKzDwB,EAAaF,iBAAiB,YAAYC,MAAOyC,IAC7C,GAAc,UAAVA,EAAEC,MAAoBD,EAAEE,SAAU,CAClCF,EAAEG,iBACF,MAAMC,EAAU5C,EAAa6C,MAAMC,OACnC,GAAIF,EACA,IAEIvB,EAAWuB,EAAS,QACpB5C,EAAa6C,MAAQ,GAGrB,MAAME,EA0EtB,WACI,IAAK7C,EAAa,MAAM,IAAIhB,MAAM,0BAElC,MAAM8D,EAAenD,SAAS2B,cAAc,OAK5C,OAJAwB,EAAavB,UAAY,gCACzBuB,EAAahC,UAAY,4BACzBd,EAAYwB,YAAYsB,GACxBA,EAAarB,eAAe,CAAEC,SAAU,WACjCoB,CACX,CAnFwCC,GAGlBhE,QAAiBd,EAAgBC,YAAYrB,EAAaM,YAGhEqB,OAAOwE,QAAQC,YAAY,CACvB/F,KAAM,kBACNgG,QAAS,CACLR,UACAS,aAAc,cACdpE,SAAUA,EAASpB,YAEvByF,IAEAP,EAAgBQ,SAEZD,GAAYA,EAASE,QAErBnC,EAAWiC,EAASG,KAAM,aAE1BpC,EAAW,qDAAsD,Q,IAG3E,MAAO7C,GACLC,QAAQD,MAAM,4BAA6BA,GAC3C6C,EAAW,qDAAsD,Q,MAOjFlB,GAAgBL,iBAAiB,SAAS,KACtCpB,OAAOwE,QAAQC,YAAY,CACvB/F,KAAM,2BACR,IAINgD,GAAaN,iBAAiB,SAASC,UACnC,IACI,MAGM2D,EAHWvB,MAAMC,KAAKlC,EAAY8B,iBAAiB,kBACpDf,KAAI0C,GAAOA,EAAI7C,aAAagC,QAAU,KAElB3B,KAAK,QACxByC,EAAO,IAAIC,KAAK,CAACH,GAAU,CAAEtG,KAAM,eACnC0G,EAAMC,IAAIC,gBAAgBJ,GAE1BK,EAAIpE,SAAS2B,cAAc,KACjCyC,EAAEC,KAAOJ,EACTG,EAAEE,SAAW,2BACbtE,SAASuE,KAAK1C,YAAYuC,GAC1BA,EAAEI,QACFxE,SAASuE,KAAKE,YAAYL,GAC1BF,IAAIQ,gBAAgBT,E,CACtB,MAAOtF,GACLC,QAAQD,MAAM,8BAA+BA,GAC7C6C,EAAW,6BAA8B,Q,KA4BjDT,GAAsB,G","sources":["webpack://game-doc-system/./src/shared/types.ts","webpack://game-doc-system/./src/templates/gameVisionTemplate.ts","webpack://game-doc-system/./src/templates/templateManager.ts","webpack://game-doc-system/./src/game-vision/game-vision.ts"],"sourcesContent":["// Document types supported by the system\r\nexport enum DocumentType {\r\n  GameVision = 'game_vision',\r\n  CoreGameConcept = 'core_game_concept',\r\n  TargetAudience = 'target_audience',\r\n  CorePillarsValues = 'core_pillars_values',\r\n  WhyPlayIt = 'why_play_it',\r\n  WhatShouldTheyFeel = 'what_should_they_feel',\r\n  UniqueSellingPoints = 'unique_selling_points',\r\n  GameLoop = 'game_loop',\r\n  PlayerJourney = 'player_journey',\r\n  StoryOverview = 'story_overview',\r\n  Presentation = 'presentation',\r\n  KeyQuestions = 'key_questions',\r\n  CoreDesignDetails = 'core_design_details',\r\n  StrategicDirection = 'strategic_direction'\r\n}\r\n\r\n// Document status\r\nexport enum DocumentStatus {\r\n  NotStarted = 'not_started',\r\n  InProgress = 'in_progress',\r\n  Completed = 'completed'\r\n}\r\n\r\n// Project structure\r\nexport interface GameProject {\r\n  id: string;\r\n  name: string;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  documents: Record<string, GameDocument>;\r\n}\r\n\r\n// Document structure\r\nexport interface GameDocument {\r\n  id: string;\r\n  projectId: string;\r\n  type: DocumentType;\r\n  title: string;\r\n  content: string;\r\n  status: DocumentStatus;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  versions: DocumentVersion[];\r\n}\r\n\r\n// Document version\r\nexport interface DocumentVersion {\r\n  versionNumber: number;\r\n  content: string;\r\n  createdAt: number;\r\n  notes: string;\r\n}\r\n\r\n// Message types for communication between components\r\nexport enum MessageType {\r\n  GetProjects = 'get_projects',\r\n  CreateProject = 'create_project',\r\n  UpdateProject = 'update_project',\r\n  DeleteProject = 'delete_project',\r\n  GetProject = 'get_project',\r\n  CreateDocument = 'create_document',\r\n  UpdateDocument = 'update_document',\r\n  GetDocument = 'get_document',\r\n  DeleteDocument = 'delete_document',\r\n  StartDocumentCreation = 'start_document_creation'\r\n}\r\n\r\n// Message structure\r\nexport interface Message {\r\n  type: MessageType;\r\n  payload: any;\r\n}\r\n\r\n// Response structure\r\nexport interface Response {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n}\r\n","import { DocumentType } from '../shared/types';\r\nimport { DocumentTemplate } from './types';\r\n\r\nexport const defaultGameVisionTemplate: DocumentTemplate = {\r\n    id: 'default_game_vision',\r\n    type: DocumentType.GameVision,\r\n    name: 'Game Vision',\r\n    description: 'Capture the creative essence and high-level concept of your game',\r\n    version: '1.0.0',\r\n    isCustom: false,\r\n    lastModified: Date.now(),\r\n    settings: {\r\n        purpose: 'Capture the creative essence and high-level concept of your game in a clear, inspiring format.',\r\n        keyInformation: [\r\n            'Game type and core gameplay',\r\n            'Unique features and innovations',\r\n            'Emotional impact on players',\r\n            'Core promise to players'\r\n        ],\r\n        outputFormat: {\r\n            sections: [\r\n                'Title of the game',\r\n                'Single inspirational line description',\r\n                'One comprehensive paragraph containing the game overview'\r\n            ],\r\n            requirements: [\r\n                'Game type, player count, and platform',\r\n                'Core gameplay and player fantasy',\r\n                'Main gameplay experience',\r\n                'Player motivation and rewards',\r\n                'Unique elements and lasting impact'\r\n            ]\r\n        }\r\n    }\r\n}; ","import { DocumentType } from '../shared/types';\r\nimport { DocumentTemplate, TemplateSettings } from './types';\r\nimport { defaultGameVisionTemplate } from './gameVisionTemplate';\r\n\r\nexport class TemplateManager {\r\n    private static readonly STORAGE_KEY = 'gdds_templates';\r\n    private static readonly DEFAULT_TEMPLATES: Partial<Record<DocumentType, DocumentTemplate>> = {\r\n        [DocumentType.GameVision]: defaultGameVisionTemplate,\r\n        // Add other default templates here as they're created\r\n    };\r\n\r\n    static async getTemplate(type: DocumentType): Promise<DocumentTemplate> {\r\n        try {\r\n            const templates = await this.getAllTemplates();\r\n            return templates[type] || this.DEFAULT_TEMPLATES[type] as DocumentTemplate;\r\n        } catch (error) {\r\n            console.error('Error getting template:', error);\r\n            return this.DEFAULT_TEMPLATES[type] as DocumentTemplate;\r\n        }\r\n    }\r\n\r\n    static async getAllTemplates(): Promise<Partial<Record<DocumentType, DocumentTemplate>>> {\r\n        try {\r\n            const result = await chrome.storage.sync.get(this.STORAGE_KEY);\r\n            return result[this.STORAGE_KEY] || this.DEFAULT_TEMPLATES;\r\n        } catch (error) {\r\n            console.error('Error getting templates:', error);\r\n            return this.DEFAULT_TEMPLATES;\r\n        }\r\n    }\r\n\r\n    static async saveTemplate(type: DocumentType, settings: TemplateSettings): Promise<void> {\r\n        try {\r\n            const templates = await this.getAllTemplates();\r\n            const template = templates[type] || this.DEFAULT_TEMPLATES[type];\r\n\r\n            if (!template) {\r\n                throw new Error(`No template found for type: ${type}`);\r\n            }\r\n\r\n            const updatedTemplate: DocumentTemplate = {\r\n                ...template,\r\n                settings,\r\n                lastModified: Date.now(),\r\n                isCustom: true\r\n            };\r\n\r\n            await chrome.storage.sync.set({\r\n                [this.STORAGE_KEY]: {\r\n                    ...templates,\r\n                    [type]: updatedTemplate\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Error saving template:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async resetTemplate(type: DocumentType): Promise<void> {\r\n        try {\r\n            const templates = await this.getAllTemplates();\r\n            const defaultTemplate = this.DEFAULT_TEMPLATES[type];\r\n\r\n            if (!defaultTemplate) {\r\n                throw new Error(`No default template found for type: ${type}`);\r\n            }\r\n\r\n            await chrome.storage.sync.set({\r\n                [this.STORAGE_KEY]: {\r\n                    ...templates,\r\n                    [type]: defaultTemplate\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Error resetting template:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async exportTemplate(type: DocumentType): Promise<string> {\r\n        try {\r\n            const template = await this.getTemplate(type);\r\n            return JSON.stringify(template, null, 2);\r\n        } catch (error) {\r\n            console.error('Error exporting template:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async importTemplate(templateJson: string): Promise<void> {\r\n        try {\r\n            const template: DocumentTemplate = JSON.parse(templateJson);\r\n            \r\n            if (!template.type || !template.settings) {\r\n                throw new Error('Invalid template format');\r\n            }\r\n\r\n            await this.saveTemplate(template.type, template.settings);\r\n        } catch (error) {\r\n            console.error('Error importing template:', error);\r\n            throw error;\r\n        }\r\n    }\r\n} ","import { DocumentType } from '../shared/types';\r\nimport { TemplateManager } from '../templates/templateManager';\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n    const messageInput = document.querySelector<HTMLTextAreaElement>('.message-input');\r\n    const mainContent = document.querySelector<HTMLDivElement>('.main-content');\r\n    const addDocumentBtn = document.querySelector<HTMLButtonElement>('.add-document-btn');\r\n    const downloadBtn = document.querySelector<HTMLButtonElement>('.document-controls button[title=\"Download\"]');\r\n    const settingsBtn = document.querySelector<HTMLButtonElement>('.document-controls button[title=\"Settings\"]');\r\n    const templateModal = document.getElementById('templateSettings');\r\n    const closeModalBtn = document.getElementById('closeModal');\r\n    const saveChangesBtn = document.getElementById('saveChanges');\r\n    const cancelChangesBtn = document.getElementById('cancelChanges');\r\n\r\n    if (!messageInput || !mainContent || !templateModal) {\r\n        console.error('Required elements not found');\r\n        return;\r\n    }\r\n\r\n    let currentTemplate = null;\r\n\r\n    // Load template settings\r\n    async function loadTemplateSettings() {\r\n        try {\r\n            currentTemplate = await TemplateManager.getTemplate(DocumentType.GameVision);\r\n            \r\n            const purposeContent = document.querySelector<HTMLDivElement>('[data-section=\"purpose\"] .template-section-content');\r\n            if (purposeContent) {\r\n                purposeContent.textContent = currentTemplate.settings.purpose;\r\n            }\r\n\r\n            const keyInfoList = document.querySelector<HTMLUListElement>('[data-section=\"keyInformation\"] .bullet-list');\r\n            if (keyInfoList) {\r\n                keyInfoList.innerHTML = currentTemplate.settings.keyInformation\r\n                    .map(item => `<li>${item}</li>`)\r\n                    .join('');\r\n            }\r\n\r\n            const outputList = document.querySelector<HTMLUListElement>('[data-section=\"outputFormat\"] .bullet-list');\r\n            if (outputList) {\r\n                outputList.innerHTML = `\r\n                    ${currentTemplate.settings.outputFormat.sections\r\n                        .map(item => `<li>${item}</li>`)\r\n                        .join('')}\r\n                    <li>One comprehensive paragraph containing:\r\n                        <ul class=\"sub-bullet-list\">\r\n                            ${currentTemplate.settings.outputFormat.requirements\r\n                                .map(item => `<li>${item}</li>`)\r\n                                .join('')}\r\n                        </ul>\r\n                    </li>\r\n                `;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading template settings:', error);\r\n        }\r\n    }\r\n\r\n    // Handle settings button click\r\n    settingsBtn?.addEventListener('click', () => {\r\n        loadTemplateSettings();\r\n        templateModal.style.display = 'flex';\r\n    });\r\n\r\n    // Handle modal close\r\n    closeModalBtn?.addEventListener('click', () => {\r\n        templateModal.style.display = 'none';\r\n    });\r\n\r\n    // Handle cancel changes\r\n    cancelChangesBtn?.addEventListener('click', () => {\r\n        templateModal.style.display = 'none';\r\n    });\r\n\r\n    // Handle save changes\r\n    saveChangesBtn?.addEventListener('click', async () => {\r\n        try {\r\n            const purposeContent = document.querySelector<HTMLDivElement>('[data-section=\"purpose\"] .template-section-content');\r\n            const keyInformationItems = document.querySelectorAll<HTMLLIElement>('[data-section=\"keyInformation\"] .bullet-list > li');\r\n            const outputSectionItems = document.querySelectorAll<HTMLLIElement>('[data-section=\"outputFormat\"] .bullet-list > li:not(:last-child)');\r\n            const outputRequirementItems = document.querySelectorAll<HTMLLIElement>('[data-section=\"outputFormat\"] .sub-bullet-list > li');\r\n\r\n            if (!purposeContent) {\r\n                throw new Error('Purpose content not found');\r\n            }\r\n\r\n            const purpose = purposeContent.textContent || '';\r\n            const keyInformation = Array.from(keyInformationItems).map(li => li.textContent || '');\r\n            const outputSections = Array.from(outputSectionItems).map(li => li.textContent || '');\r\n            const outputRequirements = Array.from(outputRequirementItems).map(li => li.textContent || '');\r\n\r\n            await TemplateManager.saveTemplate(DocumentType.GameVision, {\r\n                purpose,\r\n                keyInformation,\r\n                outputFormat: {\r\n                    sections: outputSections,\r\n                    requirements: outputRequirements\r\n                }\r\n            });\r\n\r\n            templateModal.style.display = 'none';\r\n        } catch (error) {\r\n            console.error('Error saving template settings:', error);\r\n        }\r\n    });\r\n\r\n    // Handle message input\r\n    messageInput.addEventListener('keypress', async (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            const message = messageInput.value.trim();\r\n            if (message) {\r\n                try {\r\n                    // Add user message to chat\r\n                    addMessage(message, 'user');\r\n                    messageInput.value = '';\r\n\r\n                    // Show typing indicator\r\n                    const typingIndicator = addTypingIndicator();\r\n\r\n                    // Get current template settings\r\n                    const template = await TemplateManager.getTemplate(DocumentType.GameVision);\r\n\r\n                    // Send message to background script for processing\r\n                    chrome.runtime.sendMessage({\r\n                        type: 'process_message',\r\n                        payload: {\r\n                            message,\r\n                            documentType: 'game_vision',\r\n                            template: template.settings\r\n                        }\r\n                    }, (response) => {\r\n                        // Remove typing indicator\r\n                        typingIndicator.remove();\r\n\r\n                        if (response && response.success) {\r\n                            // Add AI response to chat\r\n                            addMessage(response.data, 'assistant');\r\n                        } else {\r\n                            addMessage('Sorry, there was an error processing your message.', 'error');\r\n                        }\r\n                    });\r\n                } catch (error) {\r\n                    console.error('Error processing message:', error);\r\n                    addMessage('Sorry, there was an error processing your message.', 'error');\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Handle add document button\r\n    addDocumentBtn?.addEventListener('click', () => {\r\n        chrome.runtime.sendMessage({\r\n            type: 'show_template_selection'\r\n        });\r\n    });\r\n\r\n    // Handle download button\r\n    downloadBtn?.addEventListener('click', async () => {\r\n        try {\r\n            const messages = Array.from(mainContent.querySelectorAll('.chat-message'))\r\n                .map(msg => msg.textContent?.trim() || '');\r\n            \r\n            const content = messages.join('\\n\\n');\r\n            const blob = new Blob([content], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(blob);\r\n            \r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'game-vision-document.txt';\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            console.error('Error downloading document:', error);\r\n            addMessage('Error downloading document', 'error');\r\n        }\r\n    });\r\n\r\n    // Function to add a message to the chat\r\n    function addMessage(text: string, type: 'user' | 'assistant' | 'error') {\r\n        if (!mainContent) return;\r\n        \r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat-message ${type}-message`;\r\n        messageDiv.textContent = text;\r\n        mainContent.appendChild(messageDiv);\r\n        messageDiv.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    // Function to add typing indicator\r\n    function addTypingIndicator() {\r\n        if (!mainContent) throw new Error('Main content not found');\r\n        \r\n        const indicatorDiv = document.createElement('div');\r\n        indicatorDiv.className = 'chat-message typing-indicator';\r\n        indicatorDiv.innerHTML = '<span>AI is typing</span>';\r\n        mainContent.appendChild(indicatorDiv);\r\n        indicatorDiv.scrollIntoView({ behavior: 'smooth' });\r\n        return indicatorDiv;\r\n    }\r\n\r\n    // Initialize\r\n    loadTemplateSettings();\r\n}); "],"names":["DocumentType","DocumentStatus","MessageType","defaultGameVisionTemplate","id","type","GameVision","name","description","version","isCustom","lastModified","Date","now","settings","purpose","keyInformation","outputFormat","sections","requirements","TemplateManager","getTemplate","this","getAllTemplates","DEFAULT_TEMPLATES","error","console","chrome","storage","sync","get","STORAGE_KEY","saveTemplate","templates","template","Error","updatedTemplate","set","resetTemplate","defaultTemplate","exportTemplate","JSON","stringify","importTemplate","templateJson","parse","document","addEventListener","async","messageInput","querySelector","mainContent","addDocumentBtn","downloadBtn","settingsBtn","templateModal","getElementById","closeModalBtn","saveChangesBtn","cancelChangesBtn","currentTemplate","loadTemplateSettings","purposeContent","textContent","keyInfoList","innerHTML","map","item","join","outputList","addMessage","text","messageDiv","createElement","className","appendChild","scrollIntoView","behavior","style","display","keyInformationItems","querySelectorAll","outputSectionItems","outputRequirementItems","Array","from","li","outputSections","outputRequirements","e","key","shiftKey","preventDefault","message","value","trim","typingIndicator","indicatorDiv","addTypingIndicator","runtime","sendMessage","payload","documentType","response","remove","success","data","content","msg","blob","Blob","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL"],"sourceRoot":""}