{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://game-doc-system/./src/shared/types.ts","webpack://game-doc-system/./src/utils/apiKeyManager.ts","webpack://game-doc-system/./src/popup/popup.ts"],"sourcesContent":["// Document types supported by the system\r\nexport enum DocumentType {\r\n  GameVision = 'game_vision',\r\n  CoreGameConcept = 'core_game_concept',\r\n  TargetAudience = 'target_audience',\r\n  CorePillarsValues = 'core_pillars_values',\r\n  WhyPlayIt = 'why_play_it',\r\n  WhatShouldTheyFeel = 'what_should_they_feel',\r\n  UniqueSellingPoints = 'unique_selling_points',\r\n  GameLoop = 'game_loop',\r\n  PlayerJourney = 'player_journey',\r\n  StoryOverview = 'story_overview',\r\n  Presentation = 'presentation',\r\n  KeyQuestions = 'key_questions',\r\n  CoreDesignDetails = 'core_design_details',\r\n  StrategicDirection = 'strategic_direction'\r\n}\r\n\r\n// Document status\r\nexport enum DocumentStatus {\r\n  NotStarted = 'not_started',\r\n  InProgress = 'in_progress',\r\n  Completed = 'completed'\r\n}\r\n\r\n// Project structure\r\nexport interface GameProject {\r\n  id: string;\r\n  name: string;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  documents: Record<string, GameDocument>;\r\n}\r\n\r\n// Document structure\r\nexport interface GameDocument {\r\n  id: string;\r\n  projectId: string;\r\n  type: DocumentType;\r\n  title: string;\r\n  content: string;\r\n  status: DocumentStatus;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  versions: DocumentVersion[];\r\n}\r\n\r\n// Document version\r\nexport interface DocumentVersion {\r\n  versionNumber: number;\r\n  content: string;\r\n  createdAt: number;\r\n  notes: string;\r\n}\r\n\r\n// Message types for communication between components\r\nexport enum MessageType {\r\n  GetProjects = 'get_projects',\r\n  CreateProject = 'create_project',\r\n  UpdateProject = 'update_project',\r\n  DeleteProject = 'delete_project',\r\n  GetProject = 'get_project',\r\n  CreateDocument = 'create_document',\r\n  UpdateDocument = 'update_document',\r\n  GetDocument = 'get_document',\r\n  DeleteDocument = 'delete_document',\r\n  StartDocumentCreation = 'start_document_creation'\r\n}\r\n\r\n// Message structure\r\nexport interface Message {\r\n  type: MessageType;\r\n  payload: any;\r\n}\r\n\r\n// Response structure\r\nexport interface Response {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n}\r\n","export type LLMProvider = 'claude' | 'claude-api' | 'gpt4' | 'gemini' | 'local';\r\n\r\ninterface APIKeyConfig {\r\n  provider: LLMProvider;\r\n  apiKey?: string;\r\n}\r\n\r\nexport class APIKeyManager {\r\n  private static readonly STORAGE_KEY = 'gdds_api_config';\r\n\r\n  static async saveAPIConfig(config: APIKeyConfig): Promise<void> {\r\n    try {\r\n      await chrome.storage.sync.set({ [this.STORAGE_KEY]: config });\r\n    } catch (error) {\r\n      console.error('Error saving API configuration:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getAPIConfig(): Promise<APIKeyConfig | null> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(this.STORAGE_KEY);\r\n      return result[this.STORAGE_KEY] || null;\r\n    } catch (error) {\r\n      console.error('Error getting API configuration:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async clearAPIConfig(): Promise<void> {\r\n    try {\r\n      await chrome.storage.sync.remove(this.STORAGE_KEY);\r\n    } catch (error) {\r\n      console.error('Error clearing API configuration:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async validateGeminiAPIKey(apiKey: string): Promise<boolean> {\r\n    try {\r\n      // Make a simple test call to the Gemini API\r\n      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: \"Hello, this is a test message.\"\r\n            }]\r\n          }]\r\n        })\r\n      });\r\n\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Error validating Gemini API key:', error);\r\n      return false;\r\n    }\r\n  }\r\n} ","import { MessageType } from '../shared/types';\nimport { APIKeyManager, LLMProvider } from '../utils/apiKeyManager';\n\n// When popup loads\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Check connection status\n  checkConnectionStatus();\n  \n  // Load project count\n  loadProjectCount();\n  \n  // Setup open Claude button\n  const openClaudeButton = document.getElementById('open-claude');\n  if (openClaudeButton) {\n    openClaudeButton.addEventListener('click', () => {\n      chrome.tabs.create({ url: 'https://claude.ai' });\n    });\n  }\n\n  // Setup LLM selector\n  const llmSelect = document.getElementById('llm-select') as HTMLSelectElement;\n  const apiConfig = document.getElementById('api-config');\n  const claudeWebConfig = document.getElementById('connection-status');\n\n  // Load saved configuration\n  const config = await APIKeyManager.getAPIConfig();\n  if (config) {\n    llmSelect.value = config.provider;\n    if (config.apiKey) {\n      (document.getElementById('api-key-input') as HTMLInputElement).value = config.apiKey;\n    }\n    updateUIForProvider(config.provider);\n  }\n\n  // Handle provider selection change\n  llmSelect.addEventListener('change', (e) => {\n    const provider = (e.target as HTMLSelectElement).value as LLMProvider;\n    updateUIForProvider(provider);\n    \n    // Update button text based on provider\n    if (openClaudeButton) {\n      openClaudeButton.textContent = provider === 'claude' ? 'Open Claude.ai' : 'Open Document Interface';\n    }\n\n    // Clear status message when switching providers\n    const apiKeyStatus = document.getElementById('api-key-status');\n    if (apiKeyStatus) {\n      apiKeyStatus.textContent = '';\n      apiKeyStatus.className = 'api-key-status';\n    }\n  });\n\n  // Handle API key save\n  const saveKeyButton = document.getElementById('save-key-button');\n  if (saveKeyButton) {\n    saveKeyButton.addEventListener('click', async () => {\n      const provider = llmSelect.value as LLMProvider;\n      const apiKeyInput = document.getElementById('api-key-input') as HTMLInputElement;\n      const apiKey = apiKeyInput.value.trim();\n      const apiKeyStatus = document.getElementById('api-key-status');\n\n      if (!apiKey) {\n        if (apiKeyStatus) {\n          apiKeyStatus.textContent = 'Please enter an API key';\n          apiKeyStatus.className = 'api-key-status error';\n        }\n        return;\n      }\n\n      if (saveKeyButton instanceof HTMLButtonElement) {\n        saveKeyButton.disabled = true;\n      }\n      if (apiKeyStatus) {\n        apiKeyStatus.textContent = 'Validating...';\n        apiKeyStatus.className = 'api-key-status';\n      }\n\n      try {\n        let isValid = false;\n        \n        if (provider === 'gemini') {\n          isValid = await APIKeyManager.validateGeminiAPIKey(apiKey);\n        }\n        // Add validation for other providers here\n\n        if (isValid) {\n          await APIKeyManager.saveAPIConfig({ provider, apiKey });\n          if (apiKeyStatus) {\n            apiKeyStatus.textContent = 'API key saved successfully';\n            apiKeyStatus.className = 'api-key-status success';\n          }\n        } else {\n          if (apiKeyStatus) {\n            apiKeyStatus.textContent = 'Invalid API key';\n            apiKeyStatus.className = 'api-key-status error';\n          }\n        }\n      } catch (error) {\n        if (apiKeyStatus) {\n          apiKeyStatus.textContent = 'Error saving API key';\n          apiKeyStatus.className = 'api-key-status error';\n        }\n      } finally {\n        if (saveKeyButton instanceof HTMLButtonElement) {\n          saveKeyButton.disabled = false;\n        }\n      }\n    });\n  }\n});\n\n// Check if we're connected to Claude.ai\nfunction checkConnectionStatus() {\n  const statusElement = document.getElementById('connection-status');\n  if (!statusElement) return;\n  \n  chrome.tabs.query({ url: 'https://claude.ai/*' }, (tabs) => {\n    if (tabs.length > 0) {\n      statusElement.textContent = 'Connected to Claude.ai';\n      statusElement.style.color = '#4caf50'; // Green\n    } else {\n      statusElement.textContent = 'Not connected to Claude.ai';\n      statusElement.style.color = '#ff9800'; // Orange\n    }\n  });\n}\n\n// Get project count\nfunction loadProjectCount() {\n  const countElement = document.getElementById('project-count');\n  if (!countElement) return;\n  \n  chrome.runtime.sendMessage(\n    { type: MessageType.GetProjects, payload: {} },\n    (response) => {\n      if (response.success) {\n        const projects = response.data || {};\n        const count = Object.keys(projects).length;\n        countElement.textContent = `Projects: ${count}`;\n      } else {\n        countElement.textContent = 'Error loading projects';\n      }\n    }\n  );\n}\n\n// Update UI based on selected provider\nfunction updateUIForProvider(provider: LLMProvider) {\n  const apiConfig = document.getElementById('api-config');\n  const claudeWebConfig = document.getElementById('connection-status');\n  \n  if (provider === 'claude') {\n    if (apiConfig) apiConfig.style.display = 'none';\n    if (claudeWebConfig) claudeWebConfig.style.display = 'block';\n  } else {\n    if (apiConfig) apiConfig.style.display = 'block';\n    if (claudeWebConfig) claudeWebConfig.style.display = 'none';\n  }\n}\n"],"names":["DocumentType","DocumentStatus","MessageType","APIKeyManager","saveAPIConfig","config","chrome","storage","sync","set","this","STORAGE_KEY","error","console","getAPIConfig","get","clearAPIConfig","remove","validateGeminiAPIKey","apiKey","fetch","method","headers","body","JSON","stringify","contents","parts","text","ok","updateUIForProvider","provider","apiConfig","document","getElementById","claudeWebConfig","style","display","addEventListener","async","statusElement","tabs","query","url","length","textContent","color","checkConnectionStatus","countElement","runtime","sendMessage","type","GetProjects","payload","response","success","projects","data","count","Object","keys","loadProjectCount","openClaudeButton","create","llmSelect","value","e","target","apiKeyStatus","className","saveKeyButton","trim","HTMLButtonElement","disabled","isValid"],"sourceRoot":""}