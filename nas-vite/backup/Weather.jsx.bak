// src/components/game/Weather.jsx

import React, { useEffect } from 'react';
import { WEATHER_EFFECTS } from '../../config/weatherConfig';

const Weather = () => {
    useEffect(() => {
        createWeatherElements();
    }, []);

    const createWeatherElements = () => {
        const gameGrid = document.getElementById('gameGrid');
        if (!gameGrid) return;

        // Create blizzard overlay
        const blizzardRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        blizzardRect.setAttribute("id", "blizzardOverlay");
        blizzardRect.setAttribute("class", "blizzard-overlay");
        blizzardRect.setAttribute("x", "-150");
        blizzardRect.setAttribute("y", "-150");
        blizzardRect.setAttribute("width", "300");
        blizzardRect.setAttribute("height", "300");
        blizzardRect.setAttribute("fill", "white");
        blizzardRect.setAttribute("opacity", "0");

        // Create whiteout overlay
        const whiteoutRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        whiteoutRect.setAttribute("id", "whiteoutOverlay");
        whiteoutRect.setAttribute("class", "whiteout-overlay");
        whiteoutRect.setAttribute("x", "-150");
        whiteoutRect.setAttribute("y", "-150");
        whiteoutRect.setAttribute("width", "300");
        whiteoutRect.setAttribute("height", "300");
        whiteoutRect.setAttribute("fill", "white");
        whiteoutRect.setAttribute("opacity", "0");

        gameGrid.appendChild(blizzardRect);
        gameGrid.appendChild(whiteoutRect);
    };

    const applyWhiteoutEffects = (player, whiteoutOverlay, statsContainer) => {
        // Hide terrain
        document.querySelectorAll('polygon[data-terrain]').forEach(hex => {
            hex.style.opacity = String(WEATHER_EFFECTS.TERRAIN_OPACITY.HIDDEN);
        });

        // Update fog hexes
        document.querySelectorAll('.fog').forEach(fogHex => {
            fogHex.classList.remove('movement-fade', 'blizzard-fade');
            fogHex.setAttribute('fill-opacity', '1');
            fogHex.setAttribute('fill', 'white');
            fogHex.parentElement.appendChild(fogHex);
        });
        
        // Apply overlay effects
        whiteoutOverlay.setAttribute("opacity", String(WEATHER_EFFECTS.OVERLAY_OPACITY.WHITEOUT));
        player.style.opacity = String(WEATHER_EFFECTS.PLAYER_OPACITY.WHITEOUT);
        statsContainer.classList.add('whiteout-stats');
        
        // Whiten background elements
        document.body.style.backgroundColor = '#FFFFFF';
        document.querySelector('.game-container').style.backgroundColor = '#FFFFFF';
        document.querySelector('.grid-container').style.backgroundColor = '#FFFFFF';
        document.getElementById('gameGrid').style.background = 'white';
    };

    const removeWhiteoutEffects = (player, whiteoutOverlay, statsContainer) => {
        // Reset visual effects
        document.getElementById('gameGrid').style.background = '';
        player.style.opacity = String(WEATHER_EFFECTS.PLAYER_OPACITY.NORMAL);
        whiteoutOverlay.setAttribute("opacity", "0");
        statsContainer.classList.remove('whiteout-stats');
        
        // Restore background colors
        document.body.style.backgroundColor = '#1B4B7C';
        document.querySelector('.game-container').style.backgroundColor = '';
        document.querySelector('.grid-container').style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
        
        // Restore terrain and fog visibility
        document.querySelectorAll('polygon[data-terrain]').forEach(hex => {
            hex.style.opacity = String(WEATHER_EFFECTS.TERRAIN_OPACITY.NORMAL);
        });

        document.querySelectorAll('.fog').forEach(fogHex => {
            fogHex.classList.add('movement-fade');
            fogHex.setAttribute('fill', 'white');
            fogHex.setAttribute('fill-opacity', '1');
        });
    };

    // Expose methods for WeatherManager to use
    React.useEffect(() => {
        window.weatherEffects = {
            applyWhiteoutEffects,
            removeWhiteoutEffects
        };
        
        return () => {
            delete window.weatherEffects;
        };
    }, []);

    return null;
};

export default Weather;